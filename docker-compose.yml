version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: sdhz_postgres
    environment:
      POSTGRES_DB: delivery_receipt
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sdhz_network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: sdhz_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sdhz_network

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sdhz_backend
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=delivery_receipt
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/app/utils/legacy:/app/app/utils/legacy
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sdhz_network

  # Celery异步任务处理器
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sdhz_celery_worker
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=delivery_receipt
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/app/utils/legacy:/app/app/utils/legacy
    depends_on:
      - redis
      - postgres
      - backend
    networks:
      - sdhz_network

  # 前端Web应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sdhz_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sdhz_network

  # Celery Beat定时任务调度器
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sdhz_celery_beat
    command: celery -A app.tasks.celery_app beat --loglevel=info
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=delivery_receipt
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/app/utils/legacy:/app/app/utils/legacy
    depends_on:
      - redis
      - postgres
      - backend
    networks:
      - sdhz_network

  # Celery任务监控（可选）
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sdhz_flower
    command: celery -A app.tasks.celery_app flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    networks:
      - sdhz_network

volumes:
  postgres_data:
  redis_data:

networks:
  sdhz_network:
    driver: bridge