name: Claude Code CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

jobs:
  claude-code-analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install Claude Code CLI
      run: |
        curl -fsSL https://claude.ai/cli/install.sh | sh
        echo "$HOME/.claude/bin" >> $GITHUB_PATH
    
    - name: Configure Claude Code
      run: |
        echo "${{ secrets.ANTHROPIC_API_KEY }}" | claude auth login --api-key
    
    - name: Get changed files
      id: changed-files
      run: |
        git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }} > changed_files.txt
        echo "files<<EOF" >> $GITHUB_OUTPUT
        cat changed_files.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Run Claude Code analysis on changed files
      id: claude-analysis
      run: |
        echo "## Claude Code Analysis Results" > analysis_results.md
        echo "" >> analysis_results.md
        
        # 分析每个变更的文件
        while IFS= read -r file; do
          if [[ -f "$file" && ("$file" == *.py || "$file" == *.js || "$file" == *.ts || "$file" == *.vue) ]]; then
            echo "### Analysis for $file" >> analysis_results.md
            echo "" >> analysis_results.md
            
            # 使用Claude Code分析代码质量、安全性和最佳实践
            claude --file "$file" "请分析这个文件的代码质量、潜在的安全问题和改进建议。重点关注：
            1. 代码质量和可维护性
            2. 安全最佳实践
            3. 性能优化建议
            4. 代码规范遵循情况
            请用简洁的中文回答，并给出具体的改进建议。" >> analysis_results.md
            echo "" >> analysis_results.md
            echo "---" >> analysis_results.md
            echo "" >> analysis_results.md
          fi
        done < changed_files.txt
    
    - name: Comment PR with Claude analysis
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const analysisResults = fs.readFileSync('analysis_results.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: analysisResults
          });

  claude-code-security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Claude Code CLI
      run: |
        curl -fsSL https://claude.ai/cli/install.sh | sh
        echo "$HOME/.claude/bin" >> $GITHUB_PATH
    
    - name: Configure Claude Code
      run: |
        echo "${{ secrets.ANTHROPIC_API_KEY }}" | claude auth login --api-key
    
    - name: Run security analysis
      run: |
        echo "# Security Analysis Report" > security_report.md
        echo "Generated on: $(date)" >> security_report.md
        echo "" >> security_report.md
        
        # 分析后端安全性
        claude --file "backend/app" "请对这个Python FastAPI应用进行全面的安全分析，包括：
        1. SQL注入防护
        2. 身份验证和授权机制
        3. 数据验证和清理
        4. API安全最佳实践
        5. 依赖项安全检查
        6. 配置安全性
        请提供详细的安全建议和改进措施。" >> security_report.md
        
        echo "" >> security_report.md
        echo "---" >> security_report.md
        echo "" >> security_report.md
        
        # 分析前端安全性
        claude --file "frontend/src" "请对这个Vue.js前端应用进行安全分析，包括：
        1. XSS防护
        2. CSRF防护
        3. 安全的API调用
        4. 用户输入验证
        5. 安全的路由配置
        请提供具体的安全改进建议。" >> security_report.md
    
    - name: Upload security report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: security-analysis-report
        path: security_report.md

  claude-code-documentation:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Claude Code CLI
      run: |
        curl -fsSL https://claude.ai/cli/install.sh | sh
        echo "$HOME/.claude/bin" >> $GITHUB_PATH
    
    - name: Configure Claude Code
      run: |
        echo "${{ secrets.ANTHROPIC_API_KEY }}" | claude auth login --api-key
    
    - name: Generate API documentation
      run: |
        mkdir -p generated-docs
        
        # 生成API文档
        claude --file "backend/app/api" "请为这个FastAPI应用生成完整的API文档，包括：
        1. 所有端点的详细描述
        2. 请求/响应格式
        3. 认证要求
        4. 错误代码说明
        5. 使用示例
        请用Markdown格式输出。" > generated-docs/API_DOCUMENTATION.md
        
        # 生成部署指南
        claude --file "docker-compose.yml" --file "Dockerfile" "基于这些Docker配置文件，请生成一个详细的部署指南，包括：
        1. 环境要求
        2. 部署步骤
        3. 配置说明
        4. 故障排除
        5. 维护建议
        请用中文Markdown格式输出。" > generated-docs/DEPLOYMENT_GUIDE.md
    
    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add generated-docs/
        git diff --staged --quiet || git commit -m "Auto-update documentation via Claude Code"
        git push

  claude-code-optimization:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Claude Code CLI
      run: |
        curl -fsSL https://claude.ai/cli/install.sh | sh
        echo "$HOME/.claude/bin" >> $GITHUB_PATH
    
    - name: Configure Claude Code
      run: |
        echo "${{ secrets.ANTHROPIC_API_KEY }}" | claude auth login --api-key
    
    - name: Generate optimization report
      run: |
        echo "# Performance Optimization Report" > optimization_report.md
        echo "Generated on: $(date)" >> optimization_report.md
        echo "" >> optimization_report.md
        
        # 分析性能优化机会
        claude --file "backend/app" "请分析这个Python应用的性能优化机会，包括：
        1. 数据库查询优化
        2. 缓存策略
        3. 异步处理优化
        4. 内存使用优化
        5. API响应时间优化
        请提供具体的优化建议和实施方案。" >> optimization_report.md
        
        echo "" >> optimization_report.md
        echo "---" >> optimization_report.md
        echo "" >> optimization_report.md
        
        # 分析前端性能
        claude --file "frontend/src" "请分析这个Vue.js应用的性能优化机会，包括：
        1. 组件懒加载
        2. 资源优化
        3. 网络请求优化
        4. 渲染性能优化
        5. 包大小优化
        请提供具体的优化方案。" >> optimization_report.md
    
    - name: Upload optimization report
      uses: actions/upload-artifact@v4
      with:
        name: optimization-report
        path: optimization_report.md